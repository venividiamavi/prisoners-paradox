<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>100 Prisoners Paradox</title>
  <style>
    :root {
      --bg-color: #111827;
      --text-color: #f9fafb;
      --box-color: #374151;
      --revealed-color: #22c55e;
      --highlight-color: #a78bfa; /* purple for dark mode */
      --input-bg: #000;
      --input-text: #fff;
      --button-bg: #4b5563;
      --button-hover: #6b7280;
    }

    .light-mode {
      --bg-color: #f9fafb;
      --text-color: #111827;
      --box-color: #e5e7eb;
      --revealed-color: #86efac;
      --highlight-color: #facc15; /* yellow for light mode */
      --input-bg: #fff;
      --input-text: #000;
      --button-bg: #d1d5db;
      --button-hover: #9ca3af;
    }

    body {
      margin: 0;
      font-family: sans-serif;
      background-color: var(--bg-color);
      color: var(--text-color);
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 20px;
      box-sizing: border-box;
    }

    h1 {
      margin-bottom: 10px;
    }

    .controls {
      margin: 10px;
    }

    input[type="number"] {
      width: 60px;
      padding: 5px;
      background-color: var(--input-bg);
      color: var(--input-text);
      border: 1px solid #888;
      border-radius: 4px;
      margin-right: 10px;
    }

    button {
      padding: 6px 12px;
      margin: 5px;
      border: none;
      background-color: var(--button-bg);
      color: var(--text-color);
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: var(--button-hover);
    }

    .grid {
      display: grid;
      grid-template-columns: repeat(10, 1fr);
      gap: 8px;
      max-width: 600px;
      width: 100%;
    }

    .box {
      height: 60px;
      background-color: var(--box-color);
      color: var(--text-color);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      border-radius: 6px;
      font-weight: bold;
      cursor: pointer;
      user-select: none;
    }

    .revealed {
      background-color: var(--revealed-color) !important;
    }

    .highlight {
      background-color: var(--highlight-color) !important;
    }

    .box-id {
      font-size: 13px;
    }

    .box-value {
      font-size: 20px;
    }

    .status {
      margin: 10px;
      font-size: 16px;
    }

    #targetConfirm {
      font-size: 16px;
      font-weight: bold;
      margin-bottom: 8px;
      color: var(--highlight-color);
    }
  </style>
</head>
<body>
  <h1>100 Prisoners Paradox</h1>

  <div id="targetConfirm">ðŸŽ¯ Target number set to: 1</div>

  <div class="controls">
    <label for="target">ðŸŽ¯ Target Number:</label>
    <input type="number" id="target" min="1" max="100" value="1" />
    <button onclick="toggleTheme()">ðŸŒ“ Toggle Mode</button>
    <button onclick="refresh()">ðŸ”„ Refresh</button>
  </div>

  <div class="controls">
    <label for="openBox">Open Box #</label>
    <input type="number" id="openBox" min="1" max="100" />
    <button onclick="openTypedBox(); document.getElementById('openBox').value = ''">ðŸ”“ Open</button>
  </div>

  <div class="status">
    <span id="stepCounter">Steps taken: 0</span>
    <div id="foundMessage"></div>
  </div>

  <div class="grid" id="grid"></div>

  <script>
    let boxes = [];
    let revealed = Array(100).fill(false);
    let steps = 0;
    let gameOver = false;
    let target = 1;

    const grid = document.getElementById("grid");
    const targetInput = document.getElementById("target");
    const targetConfirm = document.getElementById("targetConfirm");
    const stepCounter = document.getElementById("stepCounter");
    const foundMessage = document.getElementById("foundMessage");

    function generateBoxes() {
      const numbers = Array.from({ length: 100 }, (_, i) => i + 1);
      for (let i = numbers.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [numbers[i], numbers[j]] = [numbers[j], numbers[i]];
      }
      return numbers;
    }

    function renderGrid() {
      grid.innerHTML = "";
      boxes.forEach((num, index) => {
        const div = document.createElement("div");
        div.className = "box";
        if (revealed[index]) {
          div.classList.add("revealed");
          if (num === Number(target)) {
            div.classList.add("highlight");
          }
        }
        div.innerHTML = `
          <div class="box-id">#${index + 1}</div>
          <div class="box-value">${revealed[index] ? num : ""}</div>
        `;
        div.onclick = () => handleBoxClick(index);
        grid.appendChild(div);
      });
    }

    function handleBoxClick(index) {
      if (gameOver || revealed[index]) return;
      revealed[index] = true;
      steps++;
      stepCounter.textContent = `Steps taken: ${steps}`;
      renderGrid();
      if (boxes[index] === Number(target)) {
        gameOver = true;
        foundMessage.innerHTML = `ðŸŽ‰ Found ${target} in ${steps} steps!`;
      }
    }

    function refresh() {
      boxes = generateBoxes();
      revealed = Array(100).fill(false);
      steps = 0;
      gameOver = false;
      target = Number(targetInput.value);
      stepCounter.textContent = `Steps taken: 0`;
      foundMessage.innerHTML = "";
      targetConfirm.innerHTML = `ðŸŽ¯ Target number set to: ${target}`;
      renderGrid();
    }

    function openTypedBox() {
      const index = Number(document.getElementById("openBox").value) - 1;
      if (index >= 0 && index < 100) {
        handleBoxClick(index);
      }
    }

    function toggleTheme() {
      document.body.classList.toggle("light-mode");
      renderGrid(); // re-render to apply new highlight color
    }

    // Initial grid setup
    refresh();

    // Listen for Enter on Open Box input
    document.getElementById('openBox').addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        openTypedBox();
        document.getElementById('openBox').value = '';
      }
    });

    // Update target on input change or blur
    targetInput.addEventListener('change', () => {
      target = Number(targetInput.value);
      targetConfirm.innerHTML = `ðŸŽ¯ Target number set to: ${target}`;
      refresh();
    });
    targetInput.addEventListener('blur', () => {
      target = Number(targetInput.value);
      targetConfirm.innerHTML = `ðŸŽ¯ Target number set to: ${target}`;
    });
  </script>
</body>
</html>
